import unittest
from unittest.mock import patch, MagicMock
from unittest.mock import Mock
from returns.result import Failure

from multipart import MultiDict
from src.models.multipart_parser import MultipartParser, MultiPartData, MultiPartFile
from src.exceptions.bad_request_exception import BadRequestException
from src.models.event import Event
import io


class TestMultiPartParser(unittest.TestCase):
    def test_extract_event_data(self):
        event = MagicMock()
        event.headers = {
            'content-type': 'multipart/form-data; boundary=--------------------------195476317316419542965617'}
        event.body = io.BytesIO(
            b'----------------------------195476317316419542965617\r\nContent-Disposition: form-data; name="file"; filename="cat1_optimized_1.jpg"\r\nContent-Type: image/jpeg\r\n\r\n\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00`\x00`\x00\x00\xff\xdb\x00C\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xff\xdb\x00C\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xff\xc0\x00\x11\x08\x00\n\x00\n\x03\x01\x11\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x15\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\t\xff\xc4\x00&\x10\x00\x01\x03\x03\x02\x05\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x05\x06\x03\x04\x07\x00\t\x08\x12\x151A\x11\x14\x16!B\xff\xc4\x00\x15\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x07\xff\xc4\x00%\x11\x01\x00\x01\x03\x03\x03\x04\x03\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x00\x02\x04\x05\x06!\x12\x145\x03\x151\x81\x82\xb1\xb2\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\x8a\x18\xe7j\xcc3\x12\xe1\x06Y\x9d3\xbb\xb4Q\xaaU\x11\xc0\xf9\xb5]e\x96\xf3\'U\xc6l\xf9\xc2X\x8e\xec\xd8\x96\x03+\xeb\x1c\x889:?\xf7\xf11\x8c\xa0\xc5\xa5\x12n\x81H\nN\x1c\xd2\x82\x11\x8f\xb92\xb3\xf5N\xd7\x12\xd3\xda\xe4E\x15\x0bFN\x18\xe9\xbb\x8b\x99\x14-\x01\x0e\xa9}\xeb\xed\xacm?K\xeer\xa4\xd5e\x90H\x99\xe1X\xe5\xb6X\xf89T\x98C}\xed\xae\xbc\xa5\xc7\xaf\x9e\xfd\xfc\xfe\xb4\xde\x80\xd2S\xdc)\xf5\xec\xf6\xdd:&\xf2\xeaT^\xb8\x84\xc1\x04\xf3H\x9cn\xca\x9b\xb17\xc23I\xd8\x13\x98-e\x1b\xf2\xb11\x13\xb3[\xa4\xaa\xb6\xc4(TT\x15\x11u9\xd9\xfeST\xfc\x7fmQ\xb7_\x8a\xd3>\xbf\xa6\x8d&\xa8\xd59\xaf\xff\xd9\r\n----------------------------195476317316419542965617\r\nContent-Disposition: form-data; name="prompt"\r\n\r\nwhat is in this image?\r\n----------------------------195476317316419542965617--\r\n')

        multipart_parser = MultipartParser()
        result = multipart_parser.extract_event_data(event=event).unwrap()

        self.assertIsInstance(result.file, MultiPartFile)
        self.assertIsInstance(result.file.file_data, io.BytesIO)
        self.assertIsInstance(result.prompt, str)
        self.assertIsInstance(result.file.mime_type, str)

    def test_extract_data_with_missing_file_param(self):
        event = MagicMock()
        event.headers = {
            'content-type': 'multipart/form-data; boundary=--------------------------195476317316419542965617'}
        event.body = io.BytesIO(
            b'----------------------------226724315335105510146125\r\nContent-Disposition: form-data; name="file"; filename="cat1_optimized_1.jpg"\r\nContent-Type: image/jpeg\r\n\r\n\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00`\x00`\x00\x00\xff\xdb\x00C\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xff\xdb\x00C\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xff\xc0\x00\x11\x08\x00\n\x00\n\x03\x01\x11\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x15\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\t\xff\xc4\x00&\x10\x00\x01\x03\x03\x02\x05\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x05\x06\x03\x04\x07\x00\t\x08\x12\x151A\x11\x14\x16!B\xff\xc4\x00\x15\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x07\xff\xc4\x00%\x11\x01\x00\x01\x03\x03\x03\x04\x03\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x00\x02\x04\x05\x06!\x12\x145\x03\x151\x81\x82\xb1\xb2\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\x8a\x18\xe7j\xcc3\x12\xe1\x06Y\x9d3\xbb\xb4Q\xaaU\x11\xc0\xf9\xb5]e\x96\xf3\'U\xc6l\xf9\xc2X\x8e\xec\xd8\x96\x03+\xeb\x1c\x889:?\xf7\xf11\x8c\xa0\xc5\xa5\x12n\x81H\nN\x1c\xd2\x82\x11\x8f\xb92\xb3\xf5N\xd7\x12\xd3\xda\xe4E\x15\x0bFN\x18\xe9\xbb\x8b\x99\x14-\x01\x0e\xa9}\xeb\xed\xacm?K\xeer\xa4\xd5e\x90H\x99\xe1X\xe5\xb6X\xf89T\x98C}\xed\xae\xbc\xa5\xc7\xaf\x9e\xfd\xfc\xfe\xb4\xde\x80\xd2S\xdc)\xf5\xec\xf6\xdd:&\xf2\xeaT^\xb8\x84\xc1\x04\xf3H\x9cn\xca\x9b\xb17\xc23I\xd8\x13\x98-e\x1b\xf2\xb11\x13\xb3[\xa4\xaa\xb6\xc4(TT\x15\x11u9\xd9\xfeST\xfc\x7fmQ\xb7_\x8a\xd3>\xbf\xa6\x8d&\xa8\xd59\xaf\xff\xd9\r\n----------------------------226724315335105510146125--\r\n')

        multipart_parser = MultipartParser()
        result = multipart_parser.extract_event_data(event=event)
        self.assertIsInstance(result, Failure)
        self.assertEqual(result.failure().message, 'file not found in the event')

    def test_extract_data_with_missing_prompt_param(self):
        event = MagicMock()
        event.headers = {
            'content-type': 'multipart/form-data; boundary=--------------------------195476317316419542965617'}
        event.body = io.BytesIO(
            b'----------------------------195476317316419542965617\r\nContent-Disposition: form-data; name="file"; filename="cat1_optimized_1.jpg"\r\nContent-Type: image/jpeg\r\n\r\n\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00`\x00`\x00\x00\xff\xdb\x00C\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xff\xdb\x00C\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xff\xc0\x00\x11\x08\x00\n\x00\n\x03\x01\x11\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x15\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\t\xff\xc4\x00&\x10\x00\x01\x03\x03\x02\x05\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x05\x06\x03\x04\x07\x00\t\x08\x12\x151A\x11\x14\x16!B\xff\xc4\x00\x15\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x07\xff\xc4\x00%\x11\x01\x00\x01\x03\x03\x03\x04\x03\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x00\x02\x04\x05\x06!\x12\x145\x03\x151\x81\x82\xb1\xb2\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\x8a\x18\xe7j\xcc3\x12\xe1\x06Y\x9d3\xbb\xb4Q\xaaU\x11\xc0\xf9\xb5]e\x96\xf3\'U\xc6l\xf9\xc2X\x8e\xec\xd8\x96\x03+\xeb\x1c\x889:?\xf7\xf11\x8c\xa0\xc5\xa5\x12n\x81H\nN\x1c\xd2\x82\x11\x8f\xb92\xb3\xf5N\xd7\x12\xd3\xda\xe4E\x15\x0bFN\x18\xe9\xbb\x8b\x99\x14-\x01\x0e\xa9}\xeb\xed\xacm?K\xeer\xa4\xd5e\x90H\x99\xe1X\xe5\xb6X\xf89T\x98C}\xed\xae\xbc\xa5\xc7\xaf\x9e\xfd\xfc\xfe\xb4\xde\x80\xd2S\xdc)\xf5\xec\xf6\xdd:&\xf2\xeaT^\xb8\x84\xc1\x04\xf3H\x9cn\xca\x9b\xb17\xc23I\xd8\x13\x98-e\x1b\xf2\xb11\x13\xb3[\xa4\xaa\xb6\xc4(TT\x15\x11u9\xd9\xfeST\xfc\x7fmQ\xb7_\x8a\xd3>\xbf\xa6\x8d&\xa8\xd59\xaf\xff\xd9\r\n----------------------------195476317316419542965617--\r\n')

        multipart_parser = MultipartParser()
        result = multipart_parser.extract_event_data(event=event)
        self.assertIsInstance(result, Failure)
        self.assertEqual(result.failure().message, 'prompt not found in the event')